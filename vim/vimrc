" Vundle {{{1
set nocompatible
filetype off

let is_windows = has('win32') || has('win64')
" TODO: add windows support

set rtp+=~/.vim/bundle/vundle
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/vundle'

" Plugins {{{2
" appearance
Plugin 'nanotech/jellybeans.vim'
Plugin 'bling/vim-airline'

" general utilities
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'kana/vim-smartinput'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'mbbill/undotree'

" programming
if !is_windows
    " YCM does not work on windows
    Plugin 'scrooloose/syntastic'
    Plugin 'Valloric/YouCompleteMe'
endif
if executable('ctags')
    Plugin 'majutsushi/tagbar'
endif

" file modes {{{3
Plugin 'klen/python-mode'
Plugin 'superbrothers/vim-vimperator'
Plugin 'vim-scripts/glsl.vim'

" webdev related
Plugin 'groenewege/vim-less'
Plugin 'othree/html5.vim'

" Javascript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
if executable('node')
    Plugin 'marijnh/tern_for_vim'
endif

" Haskell
if executable('cabal')
    Plugin 'eagletmt/ghcmod-vim'
    Plugin 'eagletmt/neco-ghc'
    Plugin 'Shougo/vimproc.vim'
endif

" }}}3

" editing
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'vim-pandoc/vim-pantondoc'
" TODO: Write new task/close task commands manually for *.md files
"Plugin 'vitalk/vim-simple-todo'

" }}}2

call vundle#end()
filetype plugin indent on
" }}}1

"" General {{{1
syntax on

" autoread whenever a file is changed from outside
set autoread

" a long history
set history=1000

"always show current position
set ruler

" Always show the statusline
set laststatus=2
" turn on wildmenu
set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ignore case when searching
set ignorecase
" make insert-matching preserve the already written characters
set infercase
set smartcase

" highlight search things
set hlsearch
" make search act like search in modern browsers
set incsearch
" don't redraw while executing macros
set nolazyredraw

" set magic on, for regular expressions
set magic

" show matching bracets when text indicator is over them
set showmatch
" how many tenths of a second to blink
set mat=2

" number of lines to keep above and below the cursor
set scrolloff=5

" no sound on errors
set noerrorbells
set novisualbell

" Always show the statusline
set laststatus=2

" utf8, unix line endings
set encoding=utf8
set ffs=unix

set timeout
set timeoutlen=1000
set ttimeoutlen=100

" Shell
set shell=/bin/bash

" Ctags file location
set tags=tags

" Path
" add local cabal programs
let $PATH = $PATH . ':' . expand('~/.local/bin')
if executable('cabal')
    let $PATH = $PATH . ':' . expand('~/.cabal/bin')
endif

"}}}1

"" Appearance {{{1
set number numberwidth=4
set cursorline

" colors and fonts
set background=dark
colorscheme jellybeans

" gui settings
if has("gui_running")
    set guioptions-=T
    set guioptions-=L
    set guioptions-=l
    set guioptions-=b
    set guioptions-=m
    set guioptions-=r
    set t_Co=256
    set mouse=a
    set guifont=DejaVu\ Sans\ Mono\ 10
endif
"}}}1

"" Formatting {{{1
set wrap
set linebreak
set showbreak=↪

set autoindent
set smartindent
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab
set softtabstop=4
"}}}1

"" Backup {{{1
set backup
set wb
set swapfile

if has("persistent_undo")
    set undodir=~/.vim_runtime/undodir
    set undofile
endif
"}}}1

"" Additional config {{{1
" default rsync server for interactive rsync
let g:default_rsync_server = "rzeszut@student.agh.edu.pl:~/public_html/"
"}}}1

"" Functions {{{1
" Rsync {{{2
if !exists("g:default_rsync_server")
    let g:default_rsync_server = ""
endif

function! RsyncCwdInteractive()
    call inputsave()
    let serverAddress = input('Enter server address: ', g:default_rsync_server)
    call inputrestore()
    let cwd = getcwd()
    silent !clear
    execute "!rsync -ruv " . cwd . "/* " . serverAddress
endfunction

function! RsyncCwd(serverAddress)
    let cwd = getcwd()
    silent !clear
    execute "!rsync -ruv " . cwd . "/* " . a:serverAddress
endfunction
"}}}2

" UltiSnips completion function {{{2
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction
" }}}2

" Remove training whitespace {{{2
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
" }}}2

"}}}1

"" Key mappings {{{1
let mapleader=","

" escape clears highlight in normal mode
nnoremap <esc> <esc>:noh<cr>

" uppercases the word
inoremap <leader>u <esc>viwUi
nnoremap <leader>u viwU
" lowercases the word
inoremap <leader>l <esc>viwui
nnoremap <leader>l viwu

" open and edit vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" quick save and close
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" easy newline
inoremap <c-j> <cr>
inoremap <c-k> <c-o>O
" delete
inoremap <c-h> <backspace>
inoremap <c-l> <Del>

" open the fold o do the default space thing
nnoremap <silent> <space> @=(foldlevel('.') ? 'za' : "\<Space>")<CR>

" visual shifting (doesn't exit c-mode)
vnoremap < <gv
vnoremap > >gv

" make
nnoremap <F5> :make<cr>
" rsync
nnoremap <F6> :call RsyncCwdInteractive()<cr>

" windows {{{2
" smart way of moving between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" opening the windows
nnoremap <C-w>h :topleft vnew<cr>
nnoremap <C-w>l :botright vnew<cr>
nnoremap <C-w>j :botright new<cr>
nnoremap <C-w>k :topleft new<cr>
" }}}2

" disabled {{{2
" disable arrows
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>

" disable enter and backspace in insert mode
inoremap <cr> <nop>
inoremap <backspace> <nop>
" }}}2

" NERDTree {{{2
noremap <silent><F1> :NERDTreeToggle<cr>
"}}}2

" Tagbar {{{2
noremap <silent><F2> :TagbarToggle<cr>
" }}}2

" Undotree {{{2
nnoremap <silent><F3> :UndotreeToggle<cr>
" }}}2

"}}}1

"" Command mappings {{{1
command! -nargs=* -complete=help Help vertical belowright help <args>
"}}}1

"" Plugins config {{{1

" NERDTree {{{2
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeDirArrows=1
"}}}2

" Syntastic {{{2
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_mode_map = { 'mode': 'active',
    \ 'active_filetypes': [],
    \ 'passive_filetypes': ['html', 'tex']
    \}
"}}}2

" Tagbar {{{2
let g:tagbar_autoclose=0
let g:tagbar_autofocus=1
" }}}2

" python-mode {{{2
let g:pymode_lint = 0
let g:pymode_rope = 0
" }}}2

" Ctrl-P {{{2
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.(git|hg|svn)$',
  \ 'file': '(\.o|\.so|\.pyc|\.swo|\.swp|\~|\.class|\.jar)$',
  \ }
" }}}2

" YouCompleteMe {{{2
" IMPORTANT: it's not explicitely written here, but <c-space> runs the
" completion based on omnifunc/external completion functions. Like in Eclipse.
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = $HOME . '/.ycm_extra_conf.py'
let g:ycm_key_detailed_diagnostics = '<leader>yd'
let g:ycm_semantic_triggers =  {
\   'c' : ['->', '.'],
\   'cpp' : ['->', '.', '::'],
\   'php' : ['->', '::'],
\   'java,javascript,python,scala,haskell' : ['.'],
\   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
\   'ruby' : ['.', '::'],
\ }
" }}}2

" UltiSnips {{{2
" IMPORTANT: it's not explicitly written here, but <c-tab> activates the
" chosen snippet.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

augroup plugin_ultiSnips
    autocmd!
    autocmd BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
augroup END
" }}}2

" indent-guides {{{2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
" }}}2

" vim-pandoc-syntax {{{2
" Turn off ugly conceal characters
let g:pandoc#syntax#conceal#use = 0
" }}}2

" Undotree {{{2
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_WindowLayout = 2
" }}}2

"}}}1

"" Languages {{{1
" Vimscript {{{2
augroup ft_vim
    autocmd!
    autocmd FileType vim,vimperator setlocal foldmethod=marker foldlevelstart=0
augroup END
" }}}2

" Xdefaults {{{2
augroup ft_xdefaults
    autocmd!
    autocmd BufRead,BufNewFile xresources,.Xresources setlocal filetype=xdefaults
" }}}2

" C/C++ {{{2
augroup ft_cpp
    autocmd!
    autocmd FileType {cpp,c} setlocal foldmethod=syntax foldlevel=99
    autocmd FileType {cpp,c} nnoremap <leader>d :YcmCompleter GoToDefinition<cr>
    autocmd FileType {cpp,c,java} setlocal fo=croq
    autocmd FileType {cpp,c,java} setlocal cindent
    autocmd FileType {cpp,c,java} setlocal cino=:0,g0,N-s,(0,W4,j1
augroup END
" }}}2

" GLSL {{{2
augroup ft_glsl
    autocmd!
    autocmd BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl set ft=glsl
augroup END
" }}}2

" JavaScript {{{2
augroup ft_js
    autocmd!
    autocmd FileType javascript setlocal fo=croq
    autocmd FileType javascript setlocal foldmethod=marker foldmarker={,} foldlevelstart=99
    autocmd FileType javascript nnoremap <leader>d :YcmCompleter GoToDefinition<cr>
augroup END
" }}}2

" XML/HTML {{{2
augroup ft_xml
    autocmd!
    autocmd FileType {xml,html,xslt,xsd,play2-html} inoremap <buffer> <leader>/ </<c-x><c-o>
    autocmd FileType {xml,html,xslt,xsd,play2-html} setlocal omnifunc=htmlcomplete#CompleteTags
augroup END
" }}}2

" PHP {{{2
augroup ft_php
    autocmd!
    autocmd FileType php inoremap <buffer> <leader>/ </<c-x><c-o>
    autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
    autocmd FileType php setlocal foldmethod=marker foldmarker={,} foldlevelstart=99
augroup END
" }}}2

" Python {{{2
augroup ft_python
    autocmd!
    autocmd BufWritePre *.py call TrimWhiteSpace()
    autocmd FileType python set nowrap
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Grey
    autocmd FileType python match Excess /\%120v.*/
    autocmd FileType python nnoremap <leader>d :YcmCompleter GoToDefinition<cr>
augroup END
" }}}2

" TeX {{{2
augroup ft_tex
    autocmd!
    autocmd BufRead,BufNewFile *.tex set filetype=tex
    autocmd FileType tex nnoremap <buffer> <leader>c :w<cr>:!rubber --pdf --warn all %<cr>
    autocmd FileType tex nnoremap <buffer> <leader>v :!mupdf %:r.pdf &<cr><cr>
augroup END
" }}}2

" Ruby {{{2
augroup ft_ruby
    autocmd!
    autocmd FileType ruby setlocal sw=2 ts=2 et
    autocmd FileType {ruby,eruby} setlocal omnifunc=rubycomplete#Complete
augroup END
" }}}2

" CSS {{{2
augroup ft_css
    autocmd!
    autocmd FileType {css,less} setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType {css,less} setlocal foldmethod=marker foldmarker={,} foldlevelstart=99
augroup END
" }}}2

" Markdown {{{2
augroup ft_markdown
    autocmd!
    autocmd FileType {pandoc,markdown} setlocal nospell
augroup END
" }}}2

" Haskell {{{2
augroup ft_haskell
    autocmd!
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END
" }}}2

"}}}1

